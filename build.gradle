plugins {
	id 'java'
	id 'maven-publish'
	id 'idea'
	id 'eclipse'
	id 'dev.architectury.loom' version '0.10.0-SNAPSHOT'
}

apply from: 'https://raw.githubusercontent.com/TerraformersMC/GradleScripts/2.5/ferry.gradle'

loom {
	forge {
		mixinConfigs = ["mixins.terrestria.json", "mixins.terrestria.pathing.json", "mixins.terrestria.bugfix.json"]
	}

}

java.toolchain.languageVersion = JavaLanguageVersion.of(8)
//Print out JVM information so that we know what version is running. Extreamly useful for people to know when helping you.
println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

dependencies {
	minecraft "com.mojang:minecraft:$project.minecraft_version"
	mappings "net.fabricmc:yarn:$project.yarn_mappings:v2"


	forge "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
	modImplementation ("com.github.Reforged-Mods:FabricBiomeApiReforged:1.0.5") //d7bc649383
	includeMod "terraform-api", "com.terraformersmc.terraform-api:terraform-biome-remapper-api-v1:${project.terraform_biome_remapper_api_version}"
	includeMod "terraform-api", "com.terraformersmc.terraform-api:terraform-config-api-v1:${project.terraform_config_api_version}"
	includeMod "terraform-api", "com.terraformersmc.terraform-api:terraform-dirt-api-v1:${project.terraform_dirt_version}"
	includeMod "terraform-api", "com.terraformersmc.terraform-api:terraform-shapes-api-v1:${project.terraform_shapes_api_version}"
	includeMod "terraform-api", "com.terraformersmc.terraform-api:terraform-surfaces-api-v1:${project.terraform_surfaces_api_version}"
	includeMod "terraform-api", "com.terraformersmc.terraform-api:terraform-tree-api-v1:${project.terraform_tree_api_version}"
	includeMod "terraform-api", "com.terraformersmc.terraform-api:terraform-wood-api-v1:${project.terraform_wood_api_version}"
	if (findProject(':worldgen') != null) {
		includeMod "terrablender", "com.github.glitchfiend:TerraBlender-fabric:${terrablender_version}"
	}
	afterEvaluate {
		subprojects.each {
			testmodImplementation sourceSets.main.output
			implementation project(path: "${it.name}", configuration: "namedElements")
			include project("${it.name}:")
		}
	}
}
allprojects {
	apply plugin: 'java'
	apply plugin: 'idea'
	apply plugin: 'eclipse'
	apply plugin: 'maven-publish'
	apply plugin: 'fabric-loom'

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17

	group = project.maven_group

	configurations {
		dev {
			canBeResolved = false
			canBeConsumed = true
		}
	}

	jar {
		classifier = "dev"
	}

	afterEvaluate {
		processResources {
			inputs.property "version", project.version

			filesMatching("fabric.mod.json") {
				expand "version": project.version
			}
		}
	}

	//task sourcesJar(type: Jar, dependsOn: classes) {
	//	classifier = "sources"
	//	from sourceSets.main.allSource
	//}

	tasks.withType(JavaCompile) {
		it.options.encoding = "UTF-8"
		it.options.release = 17
	}

	repositories {
		maven {
			name = 'TerraformersMC'
			url = 'https://maven.terraformersmc.com/'
		}

		// TerraBlender
		maven {
			url = 'https://maven.minecraftforge.net/'
		}
	}
}

subprojects {
	dependencies {
		minecraft "com.mojang:minecraft:${project.minecraft_version}"
		mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"

		modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
		modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

		modImplementation "com.terraformersmc.terraform-api:terraform-biome-remapper-api-v1:${project.terraform_biome_remapper_api_version}"
		modImplementation "com.terraformersmc.terraform-api:terraform-config-api-v1:${project.terraform_config_api_version}"
		modImplementation "com.terraformersmc.terraform-api:terraform-dirt-api-v1:${project.terraform_dirt_version}"
		modImplementation "com.terraformersmc.terraform-api:terraform-shapes-api-v1:${project.terraform_shapes_api_version}"
		modImplementation "com.terraformersmc.terraform-api:terraform-surfaces-api-v1:${project.terraform_surfaces_api_version}"
		modImplementation "com.terraformersmc.terraform-api:terraform-tree-api-v1:${project.terraform_tree_api_version}"
		modImplementation "com.terraformersmc.terraform-api:terraform-wood-api-v1:${project.terraform_wood_api_version}"
	}

	version = rootProject.version

	runClient.enabled = false
}
